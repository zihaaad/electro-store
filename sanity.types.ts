/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Review = {
  _id: string;
  _type: "review";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  rating?: number;
  comment?: string;
  userName?: string;
  userEmail?: string;
  clerkUserId?: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  order?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "order";
  };
  createdAt?: string;
  isVerified?: boolean;
};

export type Address = {
  _id: string;
  _type: "address";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  address?: string;
  city?: string;
  state?: string;
  zip?: string;
  default?: boolean;
  createdAt?: string;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  invoice?: {
    id?: string;
    number?: string;
    hosted_invoice_url?: string;
  };
  stripeCheckoutSessionId?: string;
  stripeCustomerId?: string;
  clerkUserId?: string;
  customerName?: string;
  email?: string;
  stripePaymentIntentId?: string;
  products?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    quantity?: number;
    _key: string;
  }>;
  totalPrice?: number;
  currency?: string;
  amountDiscount?: number;
  address?: {
    state?: string;
    zip?: string;
    city?: string;
    address?: string;
    name?: string;
  };
  status?:
    | "pending"
    | "processing"
    | "paid"
    | "shipped"
    | "out_for_delivery"
    | "delivered"
    | "cancelled";
  orderDate?: string;
};

export type Product = {
  reviewCount: number;
  avgRating: number;
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  shortDescription?: string;
  description?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "new" | "hot" | "sale";
  variant?: "gadget" | "appliances" | "refrigerators" | "others";
  isFeatured?: boolean;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }
>;

export type Category = {
  productCount: any;
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  range?: number;
  featured?: boolean;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Review
  | Address
  | Order
  | Product
  | BlockContent
  | Category
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/query.ts
// Variable: DEAL_PRODUCTS
// Query: *[_type == 'product' && status == 'hot'] | order(_createdAt desc){    ...,    "categories": categories[]->title,    "ratings": *[_type == "review" && references(^._id)].rating,    "reviewCount": count(*[_type == "review" && references(^._id)])  }
export type DEAL_PRODUCTSResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  shortDescription?: string;
  description?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  price?: number;
  discount?: number;
  categories: Array<string | null> | null;
  stock?: number;
  status?: "hot" | "new" | "sale";
  variant?: "appliances" | "gadget" | "others" | "refrigerators";
  isFeatured?: boolean;
  ratings: Array<number | null>;
  reviewCount: number;
}>;
// Variable: PRODUCT_BY_SLUG_QUERY
// Query: *[_type == "product" && slug.current == $slug][0] {    ...,    "reviews": *[_type == "review" && references(^._id)] | order(createdAt desc) {      _id,      rating,      comment,      userName,      createdAt,      isVerified    },    "ratings": *[_type == "review" && references(^._id)].rating,    "reviewCount": count(*[_type == "review" && references(^._id)])  }
export type PRODUCT_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  shortDescription?: string;
  description?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "hot" | "new" | "sale";
  variant?: "appliances" | "gadget" | "others" | "refrigerators";
  isFeatured?: boolean;
  reviews: Array<{
    _id: string;
    rating: number | null;
    comment: string | null;
    userName: string | null;
    createdAt: string | null;
    isVerified: boolean | null;
  }>;
  ratings: Array<number | null>;
  reviewCount: number;
} | null;
// Variable: MY_ORDERS_QUERY
// Query: *[_type == 'order' && clerkUserId == $userId] | order(orderData desc){    ...,    products[]{      ...,      product->    }  }
export type MY_ORDERS_QUERYResult = Array<{
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  invoice?: {
    id?: string;
    number?: string;
    hosted_invoice_url?: string;
  };
  stripeCheckoutSessionId?: string;
  stripeCustomerId?: string;
  clerkUserId?: string;
  customerName?: string;
  email?: string;
  stripePaymentIntentId?: string;
  products: Array<{
    product: {
      _id: string;
      _type: "product";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      images?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
        _key: string;
      }>;
      shortDescription?: string;
      description?: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: "span";
              _key: string;
            }>;
            style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
            listItem?: "bullet";
            markDefs?: Array<{
              href?: string;
              _type: "link";
              _key: string;
            }>;
            level?: number;
            _type: "block";
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            alt?: string;
            _type: "image";
            _key: string;
          }
      >;
      price?: number;
      discount?: number;
      categories?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "category";
      }>;
      stock?: number;
      status?: "hot" | "new" | "sale";
      variant?: "appliances" | "gadget" | "others" | "refrigerators";
      isFeatured?: boolean;
    } | null;
    quantity?: number;
    _key: string;
  }> | null;
  totalPrice?: number;
  currency?: string;
  amountDiscount?: number;
  address?: {
    state?: string;
    zip?: string;
    city?: string;
    address?: string;
    name?: string;
  };
  status?:
    | "cancelled"
    | "delivered"
    | "out_for_delivery"
    | "paid"
    | "pending"
    | "processing"
    | "shipped";
  orderDate?: string;
}>;
// Variable: SEARCH_PRODUCTS_QUERY
// Query: *[_type == "product" && name match $searchTerm] {    _id,    name,    slug,    price,    discount,    images,    stock,    "ratings": *[_type == "review" && references(^._id)].rating,    "reviewCount": count(*[_type == "review" && references(^._id)])  }
export type SEARCH_PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  price: number | null;
  discount: number | null;
  images: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  stock: number | null;
  ratings: Array<number | null>;
  reviewCount: number;
}>;
// Variable: PRODUCT_REVIEWS_QUERY
// Query: *[_type == "review" && references($productId)] | order(createdAt desc) {    _id,    rating,    comment,    userName,    createdAt,    isVerified  }
export type PRODUCT_REVIEWS_QUERYResult = Array<{
  _id: string;
  rating: number | null;
  comment: string | null;
  userName: string | null;
  createdAt: string | null;
  isVerified: boolean | null;
}>;
// Variable: CAN_USER_REVIEW_QUERY
// Query: {    "hasDeliveredOrder": count(*[_type == "order" && clerkUserId == $userId && status == "delivered" && $productId in products[].product._ref]) > 0,    "hasReviewed": count(*[_type == "review" && clerkUserId == $userId && references($productId)]) > 0  }
export type CAN_USER_REVIEW_QUERYResult = {
  hasDeliveredOrder: boolean;
  hasReviewed: boolean;
};

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '\n  *[_type == \'product\' && status == \'hot\'] | order(_createdAt desc){\n    ...,\n    "categories": categories[]->title,\n    "ratings": *[_type == "review" && references(^._id)].rating,\n    "reviewCount": count(*[_type == "review" && references(^._id)])\n  }\n': DEAL_PRODUCTSResult;
    '\n  *[_type == "product" && slug.current == $slug][0] {\n    ...,\n    "reviews": *[_type == "review" && references(^._id)] | order(createdAt desc) {\n      _id,\n      rating,\n      comment,\n      userName,\n      createdAt,\n      isVerified\n    },\n    "ratings": *[_type == "review" && references(^._id)].rating,\n    "reviewCount": count(*[_type == "review" && references(^._id)])\n  }\n': PRODUCT_BY_SLUG_QUERYResult;
    "\n  *[_type == 'order' && clerkUserId == $userId] | order(orderData desc){\n    ...,\n    products[]{\n      ...,\n      product->\n    }\n  }\n": MY_ORDERS_QUERYResult;
    '\n  *[_type == "product" && name match $searchTerm] {\n    _id,\n    name,\n    slug,\n    price,\n    discount,\n    images,\n    stock,\n    "ratings": *[_type == "review" && references(^._id)].rating,\n    "reviewCount": count(*[_type == "review" && references(^._id)])\n  }\n': SEARCH_PRODUCTS_QUERYResult;
    '\n  *[_type == "review" && references($productId)] | order(createdAt desc) {\n    _id,\n    rating,\n    comment,\n    userName,\n    createdAt,\n    isVerified\n  }\n': PRODUCT_REVIEWS_QUERYResult;
    '\n  {\n    "hasDeliveredOrder": count(*[_type == "order" && clerkUserId == $userId && status == "delivered" && $productId in products[].product._ref]) > 0,\n    "hasReviewed": count(*[_type == "review" && clerkUserId == $userId && references($productId)]) > 0\n  }\n': CAN_USER_REVIEW_QUERYResult;
  }
}
